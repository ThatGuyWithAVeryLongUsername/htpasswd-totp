#!/usr/bin/env bash
# Setup script for htpasswd-totp.
# Generates config for htpasswd-totp.sh 
#
# (!!!) REQUIRES qrencode, oathtool, sed, openssl & jq 

# VARIABLES
# Some styling
BOLDRED="\e[31m\033[1m"
ENDCOLOR="\e[0m"
# Array of dependencies
depsArray=("jq" "sed" "oathtool" "qrencode" "openssl")
# TOTP Secret generated by OpenSSL
SECRET=$(openssl rand -hex 5 | base32)
# TOTP String for QR code generation. Tbh I don't know why $HOST var not working
TOTPString="otpauth://totp/"$(hostname)"?period=1800&issuer=htpasswd-topt&secret="$SECRET


# FUNCTIONS
# Function to check dependencies
# Better solution than "$1 -h": htpasswd always print help page as stderr
checkDeps () {
  which $1 &> /dev/null || (echo -e "${BOLDRED}[âœ—] "$1" is not installed in your system.${ENDCOLOR}\nPlease read \"Installation\" section of README.md" && false)
}
# Function to generate json config file
generateConfig () {
  echo "Writing "$1
  jq -n --arg user "$USER" --arg secret "$SECRET" '$ARGS.named'> $1
  echo -e "It's ${BOLDRED}STRONGLY${ENDCOLOR} recommended to assign \"Only owner can read\" (0600) rights to "$1"\nUse chown and chmod:\n\t chmod 0600 "$1"\n\t chown "$USER" "$1"\t# Replace \""$USER"\" to user who will run the generate-tpasswd.sh script\n\nAlso you can change \"user\" value in "$1" to something else."
}

# SCRIPT
# Pre-run: checking dependencies first.
for i in ${depsArray[@]}
do 
  checkDeps $i || exit
done 

# Check that config.json output is specified. If not - use default "config.json"
if [ -z "$1" ]
then
  cfgFile="config.json"
else
  cfgFile=$1
fi

# Weclome message.
echo -e "Hello! This is setup script for htpasswd-totp.\nPlease note that generated passwords are valid for ${BOLDRED}30 minutes${ENDCOLOR}, unlike regular 30 seconds.\n"

# Print QR-code in terminal
echo -e "Scan this QR with your favorite 2FA app: \n"
qrencode -m 2 -t utf8 <<< $TOTPString

# Aegis, KeePassXC doesn't requre equals on end
echo -e "\nOr type this secret manually:\n\t"$(echo $SECRET | sed 's/=//g')"\n\n${BOLDRED}DON'T FORGET TO SETUP 1800 SECOND TIME STEP SIZE${ENDCOLOR}\n"

read -r -p "Do you want to test your TOTP? [y/N] " responce
case "$responce" in
  [yY][eE][sS]|[yY])
    read -p "Type TOTP generated in your app: " TOTPin
    if [ "$TOTPin" -eq "$(oathtool --totp -s 1800 --base32 $SECRET)" ]; then
      echo "Great! You have configured the TOTP app!"
      generateConfig $cfgFile
    else 
      echo "TOTP doesn't match. Please check time settings on your device and/or use supported app." 
    fi
    ;;
   *)
     generateConfig $cfgFile
    ;;
esac
